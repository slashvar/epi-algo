## TP OCaml compilation

# Au besoin on peut changer les compilateurs par défaut
OCAMLC=ocamlc.opt
OCAMLPP=  -I +camlp4 -pp camlp4of.opt
OCAMLOPT=ocamlopt.opt
YACC=ocamlyacc
LEX=ocamllex.opt

PARSER=parser
LEXER=lexer
ML= ast.ml typing.ml ${PARSER}.ml ${LEXER}.ml mangling.ml memory.ml builtins.ml primitives.ml
PPML = native_data.ml
CMO=${ML:.ml=.cmo}
CMX=${ML:.ml=.cmx}
PPCMO=${PPML:.ml=.cmo}
PPCMX=${PPML:.ml=.cmx}
FULLCMO=${CMO} ${PPCMO} t_graphe.cmo main.cmo
FULLCMX=${CMX} ${PPCMX} t_graphe.cmx main.cmx
PRG=algo

BSD=make -f Makefile.pmake

all: .depend
	${BSD} ${PRG}

${PRG}: ${FULLCMX}
	${OCAMLOPT} -o ${PRG} str.cmxa $>

native_data.cmx: native_data.ml
	${OCAMLOPT} ${OCAMLPP} -c $<

native_data.mli: native_data.ml
	rm -f $@
	${OCAMLOPT} ${OCAMLPP} -i $> > $@

# Le reste n'a pas de raison de changer

.SUFFIXES: .ml .mli .cmo .cmi .cmx .opt .mly .mll

# Generation d'un exécutable à partir d'un .ml (bytecode)
.ml:
	${OCAMLC} -o $@ $<

# Generation d'un exécutable à partir d'un .ml (natif)
.ml.opt:
	${OCAMLOPT} -o $@ $<

.mli.cmi:
	${OCAMLC} -c $<

.ml.cmo:
	${OCAMLC} -c $<

.ml.cmx:
	${OCAMLOPT} -c $<

.mly.ml:
	${YACC} -v $<

.mll.ml:
	${LEX} $<

.depend: ${PARSER}.ml ${LEXER}.ml
	rm -f .depend
	ocamldep.opt -native ${ML} *.mli main.ml > .depend
	ocamldep.opt -native t_graphe.ml >> .depend
	ocamldep.opt -native ${OCAMLPP} ${PPML} >> .depend

# some cleaning ...
clean::
	rm -f *~                 # do we use emacs ;)
	rm -f *.cm[iox] *.o      # remove comp prod
	rm -f ${PRG}

fullclean: clean
	rm -f ${PARSER}.ml ${PARSER}.mli ${PARSER}.output ${LEXER}.ml .depend

# THE END (do not delete)
